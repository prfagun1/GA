@model GALibrary.Models.Procedure

@{
    ViewData["Title"] = "Edição do procedimento " + @Model.Name;
}

<h1>Edição do procedimento @Model.Name</h1>

<br />
<div class="row">
    <div class="col-md-8">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />

            <div class="form-group updateSizeForm">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <div class="form-group updateSizeForm">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control multiLine"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <div class="form-group updateSizeForm" id="divUpdateType">
                <label class="control-label">Selecione um processo</label>
                <select class="form-control" asp-items="ViewBag.updateType" id="updateType" onchange="AtualizaTiposAtualizacao()">
                    <option disabled selected></option>
                </select>
            </div>

            <div class="form-group updateSizeForm" id="divUpdateCommands">
                <label class="control-label">Selecione os comandos</label>
                <div class="form-inline">
                    <select class="form-control updateSizeFormButtons1" asp-items="ViewBag.updateCommands" id="updateCommands"></select>
                    &nbsp;&nbsp;
                    <button type="button" class="btn btn-success updateSizeButtons" onclick="ProcessAdd(3, updateCommands)"><span class="fa fa-arrow-down"></span> Adicionar na lista</button>
                </div>
            </div>

            <div class="form-group updateSizeForm" id="divUpdateServicesStart">
                <label class="control-label">Selecione os serviços para iniciar</label>
                <div class="form-inline">
                    <select class="form-control updateSizeFormButtons1" asp-items="ViewBag.updateService" id="updateServicesStart"></select>
                    &nbsp;&nbsp;
                    <button type="button" class="btn btn-success updateSizeButtons" onclick="ProcessAdd(4, updateServicesStart)"><span class="fa fa-arrow-down"></span> Adicionar na lista</button>
                </div>
            </div>

            <div class="form-group updateSizeForm" id="divUpdateServicesStop">
                <label class="control-label">Selecione os serviços para parar</label>
                <div class="form-inline">
                    <select class="form-control updateSizeFormButtons1" asp-items="ViewBag.updateService" id="updateServicesStop"></select>
                    &nbsp;&nbsp;
                    <button type="button" class="btn btn-success updateSizeButtons" onclick="ProcessAdd(5, updateServicesStop)"><span class="fa fa-arrow-down"></span> Adicionar na lista</button>
                </div>
            </div>

            <div class="updateSizeFormButtons form-group">
                <p>Processos selecionados</p>
                <table>
                    <tr>
                        <td rowspan="7">
                            <select asp-for="ProcedureSteps" class="form-control updateSizeForm listBoxSelection" id="updateProcessSelected" name="updateProcessSelected" asp-items="ViewBag.updateProcessSelected"></select>
                        </td>
                    </tr>
                    <tr>
                        <td rowspan="7">
                            &nbsp;
                        </td>
                    </tr>
                    <tr>
                        <td>&nbsp;</td>
                    </tr>
                    <tr>
                        <td>
                            <button type="button" class="btn btn-success" onclick="ProcessOrder(1)">
                                <span class="fa fa-arrow-up"></span>
                            </button>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <button type="button" class="btn btn-success" onclick="ProcessOrder(2)">
                                <span class="fa fa-arrow-down"></span>
                            </button>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <button type="button" class="btn btn-success" onclick="ProcessRemove()">
                                <span class="fa fa-remove"></span>
                            </button>
                        </td>
                    </tr>
                    <tr>
                        <td>&nbsp;</td>
                    </tr>
                </table>
                <span asp-validation-for="ProcedureSteps" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Enable" class="control-label"></label>
                <select asp-for="Enable" class="form-control col-md-4" asp-items="ViewBag.updateEnabled"></select>
                <span asp-validation-for="Enable" class="text-danger"></span>
            </div>

            <br />

            <div class="form-group">
                <input type="submit" value="Salvar" class="btn btn-success" onclick="SelectProcess()" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Voltar para a lista</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}


<script type="text/javascript">

    $(document).ready(function () {
        $("#divUpdateCommands").hide();
        $("#divUpdateServicesStart").hide();
        $("#divUpdateServicesStop").hide();

        $("#updateCommands").select2({
            placeholder: "Selecione os comandos",
            minimumInputLength: 0,
            allowClear: true,
            width: 809,
            theme: "bootstrap4"
        });

        $("#updateServicesStart").select2({
            placeholder: "Selecione os serviços",
            minimumInputLength: 0,
            allowClear: true,
            width: 809,
            theme: "bootstrap4"
        });

        $("#updateServicesStop").select2({
            placeholder: "Selecione os serviços",
            minimumInputLength: 0,
            allowClear: true,
            width: 809,
            theme: "bootstrap4"
        });
    });


    function AtualizaTiposAtualizacao() {

        var tiposAtualizacao = $('#updateType option:selected').val();

        switch (tiposAtualizacao) {
            case "0":
                $("#divUpdateCommands").hide();
                $("#divUpdateServicesStart").hide();
                $("#divUpdateServicesStop").hide();
                break;
            case "3":
                $("#divUpdateCommands").show();
                $("#divUpdateServicesStart").hide();
                $("#divUpdateServicesStop").hide();
                LoadDropDownList(tiposAtualizacao);
                break;
            case "4":
                $("#divUpdateCommands").hide();
                $("#divUpdateServicesStart").show();
                $("#divUpdateServicesStop").hide();
                LoadDropDownList(tiposAtualizacao);
                break;
            case "5":
                $("#divUpdateCommands").hide();
                $("#divUpdateServicesStart").hide();
                $("#divUpdateServicesStop").show();
                LoadDropDownList(tiposAtualizacao);
                break;
        }
    }


    function LoadDropDownList(id) {

        var type = "";

        switch (id) {
            case "3": type = "updateCommands"; break;
            case "4": type = "updateServicesStart"; break;
            case "5": type = "updateServicesStop"; break;
        }

        $.getJSON("/Procedures/LoadDropDownList/?id=" + id, function (data) {
            var items = "<option value><-- Selecione um item --></option> ";
            $('#' + type).attr("disabled", false);
            $.each(data, function (i, data) {

                items += "<option value='" + data.Value + "'>" + data.Text + "</option>";
            });
            $("#" + type).html(items);
            document.getElementById(type).selectedIndex = "0";
        });
    }


    function ProcessAdd(id, process) {
        var types = document.getElementById("updateType");

        id = id - 2;

        var typesName = types.options[id].text;
        var typesId = types.options[id].value;

        var processName = process.options[process.selectedIndex].text;
        var processId = process.value;

        if (process.selectedIndex != 0) {
            var option = document.createElement("option");
            option.text = typesName + " - " + processName;
            option.value = typesId + " - " + processId;
            document.getElementById("updateProcessSelected").options.add(option);
        }

    }

    function ProcessRemove() {
        $('#updateProcessSelected option:selected').remove();
    }

    function ProcessOrder(order) {
        var processo = document.getElementById("updateProcessSelected");
        //1 = up
        //2 = down
        if (order == 1) OrderUp(processo, processo.selectedIndex, processo.options[processo.selectedIndex]);
        if (order == 2) OrderDown(processo, processo.selectedIndex, processo.options[processo.selectedIndex]);
    }

    function OrderDown(select, idx, option) {
        if (idx == select.options.length - 1) return;

        var saved = [];
        var option = new Option(option.text, option.value)

        var i;
        for (i = 0; i < select.options.length; i++) {
            saved.push(select.options[i]);
        }


        select.options.length = 0;
        for (i = 0; i < idx; i++) {
            select.options[select.options.length] = saved[i];
        }


        select.options[select.options.length] = saved[i + 1];
        select.options[select.options.length] = option;

        i = i + 2;

        while (i < saved.length) {
            select.options[select.options.length] = saved[i++];
        }

        select.selectedIndex = idx + 1;
    }


    function OrderUp(select, idx, option) {
        if (idx == 0) return;

        var saved = [];
        var option = new Option(option.text, option.value)

        var i;
        for (i = 0; i < select.options.length; i++) {
            saved.push(select.options[i]);
        }


        select.options.length = 0;
        for (i = 0; i < idx - 1; i++) {
            select.options[select.options.length] = saved[i];
        }

        select.options[select.options.length] = option;
        select.options[select.options.length] = saved[i];

        i = i + 2;

        while (i < saved.length) {
            select.options[select.options.length] = saved[i++];
        }

        select.selectedIndex = idx - 1;
    }

    function SelectProcess() {
        $("#updateProcessSelected option").prop("selected", true);
    }
</script>